<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="atest_8cpp" kind="file">
    <compoundname>atest.cpp</compoundname>
    <includes refid="atest_8h" local="yes">atest.h</includes>
    <incdepgraph>
      <node id="1">
        <label>atest.h</label>
        <link refid="atest_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>Compatibility.h</label>
        <link refid="_compatibility_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>main.h</label>
        <link refid="main_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="0">
        <label>C:/Users/cxl20/Documents/Visual Studio 2017/Prog2HF/Prog2HF/atest.cpp</label>
        <link refid="atest.cpp"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>schtring.h</label>
        <link refid="schtring_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>fstream</label>
      </node>
      <node id="12">
        <label>Inventory.h</label>
        <link refid="_inventory_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>sstream</label>
      </node>
      <node id="11">
        <label>cctype</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
      <node id="6">
        <label>ctype.h</label>
      </node>
      <node id="9">
        <label>Parts.h</label>
        <link refid="_parts_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Builds.h</label>
        <link refid="_builds_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cstring</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="atest_8cpp_1a4d0a2ed3083cba8b7ff2167d580bd759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>(std::fstream &amp;partsFile, char partsfilename[52])</argsstring>
        <name>test1</name>
        <param>
          <type>std::fstream &amp;</type>
          <declname>partsFile</declname>
        </param>
        <param>
          <type>char</type>
          <declname>partsfilename</declname>
          <array>[52]</array>
        </param>
        <briefdescription>
<para>Test the if the parts file could be opened. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cxl20/Documents/Visual Studio 2017/Prog2HF/Prog2HF/atest.cpp" line="3" column="1" bodyfile="C:/Users/cxl20/Documents/Visual Studio 2017/Prog2HF/Prog2HF/atest.cpp" bodystart="3" bodyend="16"/>
        <referencedby refid="main_8h_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="main_8cpp" startline="7" endline="114">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="atest_8cpp_1a4e5e4ea94633fee304b7f4490e655591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool test2</definition>
        <argsstring>(Inventory &amp;inventory)</argsstring>
        <name>test2</name>
        <param>
          <type><ref refid="class_inventory" kindref="compound">Inventory</ref> &amp;</type>
          <declname>inventory</declname>
        </param>
        <briefdescription>
<para>Test whether the heterogenous collection contains the derived classes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cxl20/Documents/Visual Studio 2017/Prog2HF/Prog2HF/atest.cpp" line="18" column="1" bodyfile="C:/Users/cxl20/Documents/Visual Studio 2017/Prog2HF/Prog2HF/atest.cpp" bodystart="18" bodyend="39"/>
        <referencedby refid="main_8h_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="main_8cpp" startline="7" endline="114">main</referencedby>
        <referencedby refid="atest_8h_1a6e6df2af48d16780853d6eddcb8c8bc4" compoundref="atest_8cpp" startline="41" endline="50">test3</referencedby>
      </memberdef>
      <memberdef kind="function" id="atest_8cpp_1a6e6df2af48d16780853d6eddcb8c8bc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool test3</definition>
        <argsstring>(String test1, String test2)</argsstring>
        <name>test3</name>
        <param>
          <type><ref refid="class_string" kindref="compound">String</ref></type>
          <declname>test1</declname>
        </param>
        <param>
          <type><ref refid="class_string" kindref="compound">String</ref></type>
          <declname>test2</declname>
        </param>
        <briefdescription>
<para>Test the non case sensitive <ref refid="class_string" kindref="compound">String</ref> compare. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cxl20/Documents/Visual Studio 2017/Prog2HF/Prog2HF/atest.cpp" line="41" column="1" bodyfile="C:/Users/cxl20/Documents/Visual Studio 2017/Prog2HF/Prog2HF/atest.cpp" bodystart="41" bodyend="50"/>
        <references refid="atest_8cpp_1a4e5e4ea94633fee304b7f4490e655591" compoundref="atest_8cpp" startline="18" endline="39">test2</references>
        <referencedby refid="main_8h_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="main_8cpp" startline="7" endline="114">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="atest_8cpp_1ab545ece7a108a6470a3dc2161ba0008b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool test4</definition>
        <argsstring>(String asd, const char *test)</argsstring>
        <name>test4</name>
        <param>
          <type><ref refid="class_string" kindref="compound">String</ref></type>
          <declname>asd</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>test</declname>
        </param>
        <briefdescription>
<para>Test the string shortener. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/cxl20/Documents/Visual Studio 2017/Prog2HF/Prog2HF/atest.cpp" line="52" column="1" bodyfile="C:/Users/cxl20/Documents/Visual Studio 2017/Prog2HF/Prog2HF/atest.cpp" bodystart="52" bodyend="61"/>
        <referencedby refid="main_8h_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="main_8cpp" startline="7" endline="114">main</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="atest_8h" kindref="compound">atest.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="atest_8h_1a4d0a2ed3083cba8b7ff2167d580bd759" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="atest_8cpp_1a4d0a2ed3083cba8b7ff2167d580bd759" kindref="member">test1</ref>(std::fstream&amp;<sp/>partsFile,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>partsfilename[52])<sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!partsFile)<sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>open<sp/>parts<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>partsfilename<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nTrying<sp/>to<sp/>create<sp/>it.<sp/>\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>partsFile.open(partsfilename,<sp/>std::ios::out<sp/>|<sp/>std::ios::trunc<sp/>|<sp/>std::ios::in);</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!partsFile)<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>parts<sp/>file:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>partsfilename;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\nExiting<sp/>because<sp/>the<sp/>program<sp/>cannot<sp/>run<sp/>without<sp/>a<sp/>parts<sp/>file.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight></codeline>
<codeline lineno="14"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>1<sp/>Succesful\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="16"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="atest_8h_1a4e5e4ea94633fee304b7f4490e655591" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="atest_8cpp_1a4e5e4ea94633fee304b7f4490e655591" kindref="member">test2</ref>(<ref refid="class_inventory" kindref="compound">Inventory</ref><sp/>&amp;<sp/>inventory)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>==<sp/>(dynamic_cast&lt;CPU*&gt;(inventory[0])))<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>first<sp/>item<sp/>wasnt<sp/>a<sp/>CPU&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>==<sp/>(dynamic_cast&lt;GPU*&gt;(inventory[1])))<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>first<sp/>item<sp/>wasnt<sp/>a<sp/>CPU&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>==<sp/>(dynamic_cast&lt;GPU*&gt;(inventory[0]))))<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>first<sp/>item<sp/>was<sp/>a<sp/>GPU<sp/>instead<sp/>of<sp/>a<sp/>CPU&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>==<sp/>(dynamic_cast&lt;CPU*&gt;(inventory[1]))))<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>first<sp/>item<sp/>was<sp/>a<sp/>CPU<sp/>instead<sp/>of<sp/>a<sp/>GPU&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>2<sp/>Succesful\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="atest_8h_1a6e6df2af48d16780853d6eddcb8c8bc4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="atest_8cpp_1a6e6df2af48d16780853d6eddcb8c8bc4" kindref="member">test3</ref>(<ref refid="class_string" kindref="compound">String</ref><sp/><ref refid="atest_8cpp_1a4d0a2ed3083cba8b7ff2167d580bd759" kindref="member">test1</ref>,<sp/><ref refid="class_string" kindref="compound">String</ref><sp/><ref refid="atest_8cpp_1a4e5e4ea94633fee304b7f4490e655591" kindref="member">test2</ref>)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>(test1<sp/>==<sp/><ref refid="atest_8cpp_1a4e5e4ea94633fee304b7f4490e655591" kindref="member">test2</ref>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!temp)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Result<sp/>does<sp/>not<sp/>equal<sp/>the<sp/>expected<sp/>result&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>3<sp/>Succesful\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="atest_8h_1ab545ece7a108a6470a3dc2161ba0008b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="atest_8cpp_1ab545ece7a108a6470a3dc2161ba0008b" kindref="member">test4</ref>(<ref refid="class_string" kindref="compound">String</ref><sp/>asd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>(asd<sp/>==<sp/>test);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!temp)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Result<sp/>does<sp/>not<sp/>equal<sp/>the<sp/>expected<sp/>result&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_DEBUG</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>4<sp/>Succesful\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/cxl20/Documents/Visual Studio 2017/Prog2HF/Prog2HF/atest.cpp"/>
  </compounddef>
</doxygen>
